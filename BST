#include <iostream>
using namespace std;
 
class BST {
    int data;
    BST *left, *right;
 
public:
    BST();

    BST(int);

    BST* Insert(BST*, int);

    void Inorder(BST*);
    void Preorder(BST*);
    void Postorder(BST*);
};

BST ::BST()
    : data(0)
    , left(NULL)
    , right(NULL)
{
}

BST ::BST(int value)
{
    data = value;
    left = right = NULL;
}
 
BST* BST ::Insert(BST* root, int value)
{
    if (!root) {
        return new BST(value);
    }
 
    if (value > root->data) {
        root->right = Insert(root->right, value);
    }
    else {
        root->left = Insert(root->left, value);
    }
 
    return root;
}
 
void BST ::Inorder(BST* root)
{
    if (!root) {
        return;
    }
    Inorder(root->left);
    cout << root->data << endl;
    Inorder(root->right);
}

void BST ::Preorder(BST* root)
{
    if (!root) {
        return;
    }
    cout << root->data << endl;
	Preorder(root->left);
    Preorder(root->right);
}

void BST ::Postorder(BST* root)
{
    if (!root) {
        return;
    }
    Postorder(root->left);
    Postorder(root->right);
    cout << root->data << endl;
}

int main()
{
    BST b, *root = NULL;
    root = b.Insert(root, 25);
	b.Insert(root, 13);
	b.Insert(root, 40);
	b.Insert(root, 5);
	b.Insert(root, 34);
	b.Insert(root, 9);
	b.Insert(root, 7);	

 	cout<<"INORDER"<<endl;
    b.Inorder(root);
    cout<<"PREORDER"<<endl;
    b.Preorder(root);
    cout<<"POSTORDER"<<endl;
    b.Postorder(root);
    return 0;
}
